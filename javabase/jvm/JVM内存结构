JVM每个区域作用介绍

Java堆(Head):
	内存大小：Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块
	
	创建：Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建
	
	用途：此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存
	
	Java的内部结构包括：新生代和老年代；其中新生代包括：Eden空间、From Survivor空间、To Survivor空间
	
	内存保存逻辑：根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。
			      在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms控制）。
			      如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常

方法区（Method Area）：
	用途：方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据
	
	Java虚拟机规范对这个区域的限制非常宽松，除了和Java堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。
	相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。
	这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。
	
	根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常
	
	例子分析内存中不同区域的保存信息：
		public class HelloWorld {
			private static Logger LOGGER = Logger.getLogger(HelloWorld.class.getName());
			
			public void sayHello(String message) {
				 SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.YYYY");
				 String today = formatter.format(new Date());
				 LOOGER.info(today + ":" +message);
			}
		}
		
		Head:                            Method Area:                         Thread 1 - main
			-Object:HelloWorld                 -Class:SimpleDateFormat            -Parameter reference："message" to String object
													-...						  -Variable references：>"formatter":SimpleDateFormat
																									    >"today":String
			-Object:SimpleDateFormat           -Class:Logger                      -local primitive:"lineNo"
													-...
			-Object:String					   -Class:HelloWorld
			-Object:LOGGER                         -Method：sayHello()
			                                       -... 

程序计数器（Program Counter Register）:
		作用：程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。
		           在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，
		           分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成
		           
		          由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。
		          因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存
		举例：
			如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；
			如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）

JVM栈（JVM Stacks）:
	作用：Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。
	           虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。
	           每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。
	           
本地方法栈（Native Method Stacks）:
	作用：本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native方法服务。
	           虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一。
	           与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常
	           
	           
Exception in thread “main”:java.lang.OutOfMemoryError:Java heap space
原因：对象不能被分配到堆内存中

Exception in thread “main”:java.lang.OutOfMemoryError:PermGen space
原因：类或者方法不能被加载到老年代。它可能出现在一个程序加载很多类的时候，比如引用了很多第三方的库








  
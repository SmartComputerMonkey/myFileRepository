什么是 Java GC？
    Java GC（Garbage Collection，垃圾收集，垃圾回收）机制，是Java与C++/C的主要区别之一，
    作为Java开发者，一般不需要专门编写内存回收和垃圾清理代码，对内存泄露和溢出的问题，
    也不需要像C程序员那样战战兢兢。这是因为在Java虚拟机中，存在自动内存管理和垃圾清扫机制。
    概括地说，该机制对JVM（Java Virtual Machine）中的内存进行标记，并确定哪些内存需要回收，
    根据一定的回收策略，自动的回收内存，永不停息（Nerver Stop）的保证JVM中的内存空间，防止出现内存泄露和溢出问题。

GC参数：
    -XX:+PrintGC 输出GC日志
    -XX:+PrintGCDetails 输出GC的详细日志
    -XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）
    -XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2017-09-04T21:53:59.234+0800）
    -XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息
    -Xloggc:../logs/gc.log 日志文件的输出路径

    Tomcat 设置示例：
       JAVA_OPTS = "-server -Xms2000m -Xmx2000m -Xmn800m -XX:PermSize=64m -XX:MaxPermSize=256m -XX:SurvivorRatio=4
       -verbose:gc -Xloggc:$CATALINA_HOME/logs/gc.log
       -Djava.awt.headless=true
       -XX:+PrintGCTimeStamps -XX:+PrintGCDetails
       -Dsun.rmi.dgc.server.gcInterval=600000 -Dsun.rmi.dgc.client.gcInterval=600000
       -XX:+UseConcMarkSweepGC -XX:MaxTenuringThreshold=15"

    分析：
        -Xms2000m -Xmx2000m -Xmn800m -XX:PermSize=64m -XX:MaxPermSize=256m

        Xms，即为jvm启动时得JVM初始堆大小，Xmx为JVM的最大堆大小，xmn为新生代的大小，permsize为永久代的初始大小
        MaxPermSize为永久代的最大空间

        -XX:SurvivorRatio=4

        SurvivorRatio为新生代空间中的Eden区和救助空间Survivor区的大小比值，默认是32，也就是说Eden区是Survivor区的32倍大小，
        要注意Survivo是有两个区的，因此Survivor其实占整个young genertation的1/34.
        调小这个参数将增大survivor区，让对象尽量在survivor区呆长一点，减少进入年老代的对象。
        去掉救助空间的想法是让大部分不能马上回收的数据尽快进入年老代，加快年老代的回收频率，减少年老代暴涨的可能性，
        这个是通过将-XX:SurvivorRatio 设置成比较大的值（比如65536)来做到。

        -verbose:gc -Xloggc:$CATALINA_HOME/logs/gc.log
        将虚拟机每次垃圾回收的信息写到日志文件中，文件名由file指定，文件格式是平文件，内容和-verbose:gc输出内容相同。

        -Djava.awt.headless=true
        Headless模式是系统的一种配置模式。在该模式下，系统缺少了显示设备、键盘或鼠标。

        -XX:+PrintGCTimeStamps -XX:+PrintGCDetails 设置gc日志的格式

        -Dsun.rmi.dgc.server.gcInterval=600000 -Dsun.rmi.dgc.client.gcInterval=600000 指定rmi调用时gc的时间间隔

        -XX:+UseConcMarkSweepGC -XX:MaxTenuringThreshold=15
        采用并发gc方式，经过15次minor gc 后进入年老代

Java枚举7种常见的用法

用法1：常量的应用
	public enum Color{
		RED,GREEN,BLANK,YELLOW	
	}

用法2：switch
	例如：
		public enum Signal{
			GREEN,YELLOW,RED
		}
		public class TrafficLight{
			Signal color = Signal.RED;
			
			public void change(){
				switch(color){
					case RED:
						color = Signal.GREEN;
						break;
					case YELLOW:  
            			color = Signal.RED;  
            			break;  
        			case GREEN:  
           				color = Signal.YELLOW;  
            			break;  
        			}  
				}
			}
		}
用法3：向枚举中添加新方法
	如果打算自定义自己的方法，那么必须在enum实例序列的最后添加一个分号。而且Java要求必须先定义enum实例。
	例如：
		public enum Color {  
    		RED("红色", 1), GREEN("绿色", 2), BLANK("白色", 3), YELLO("黄色", 4);  
    		// 成员变量  
    		private String name;  
    		private int index;  
    		// 构造方法  
    		private Color(String name, int index) {  
        		this.name = name;  
        		this.index = index;  
    		}  
    		// 普通方法  
    		public static String getName(int index) {  
        		for (Color c : Color.values()) {  
           		 	if (c.getIndex() == index) {  
                		return c.name;  
            		}  
        		}  
        	return null;  
    	}  
    		// get set 方法  
    		public String getName() {  
        		return name;  
    		}  
		    public void setName(String name) {  
		        this.name = name;  
		    }  
		    public int getIndex() {  
		        return index;  
		    }  
		    public void setIndex(int index) {  
		        this.index = index;  
		    }  
		}  
		
用法4：覆盖枚举的方法；下面给出一个toString()方法覆盖的例子。
			public enum Color {  
			    RED("红色", 1), GREEN("绿色", 2), BLANK("白色", 3), YELLO("黄色", 4);  
			    // 成员变量  
			    private String name;  
			    private int index;  
			    // 构造方法  
			    private Color(String name, int index) {  
			        this.name = name;  
			        this.index = index;  
			    }  
			    //覆盖方法  
			    @Override  
			    public String toString() {  
			        return this.index+"_"+this.name;  
			    }  
			}  
用法5：实现接口；所有的枚举都继承自java.lang.Enum类。由于Java不支持多继承，所以枚举对象不能再继承其他类。
			public interface Behaviour {  
			    void print();  
			    String getInfo();  
			}  
		public enum Color implements Behaviour{  
		    RED("红色", 1), GREEN("绿色", 2), BLANK("白色", 3), YELLO("黄色", 4);  
		    // 成员变量  
		    private String name;  
		    private int index;  
		    // 构造方法  
		    private Color(String name, int index) {  
		        this.name = name;  
		        this.index = index;  
		    }  
		//接口方法  
		    @Override  
		    public String getInfo() {  
		        return this.name;  
		    }  
		    //接口方法  
		    @Override  
		    public void print() {  
		        System.out.println(this.index+":"+this.name);  
		    }  
		}  
用法6：使用接口组织枚举
	public interface Food {  
	    enum Coffee implements Food{  
	        BLACK_COFFEE,DECAF_COFFEE,LATTE,CAPPUCCINO  
	    }  
	    enum Dessert implements Food{  
	        FRUIT, CAKE, GELATO  
	    }  
	}  
用法7：关于枚举集合的使用
	java.util.EnumSet和java.util.EnumMap是两个枚举集合。
	EnumSet保证集合中的元素不重复；EnumMap中的key是enum类型，而value则可以是任意类型。